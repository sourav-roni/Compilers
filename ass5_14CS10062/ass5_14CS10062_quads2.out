THE PARSER RULES ARE
********************************************************************************************************************
********************************************************************************************************************
type_specifier ->INT_KEYWORD 
 declaration_specifiers -> type_specifier
direct_declarator ->IDENTIFIER 
type_specifier ->INT_KEYWORD 
 declaration_specifiers -> type_specifier
direct_declarator ->IDENTIFIER 
declarator -> direct_declarator
parameter_declaration ->declaration_specifiers declarator 
parameter_list ->parameter_declaration 
type_specifier ->INT_KEYWORD 
 declaration_specifiers -> type_specifier
direct_declarator ->IDENTIFIER 
declarator -> direct_declarator
parameter_declaration ->declaration_specifiers declarator 
parameter_list ->parameter_list COMMA parameter_declaration 
parameter_type_list ->parameter_list 
direct_declarator ->direct_declarator LEFT_ROUND_BRACE parameter_type_list RIGHT_ROUND_BRACE
declarator -> direct_declarator
k
0xecebb0
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
additive_expression-> multiplicative_expression
shift_expression-> additive_expression
relational_expression-> shift_expression 
l
0xecec10
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
additive_expression-> multiplicative_expression
shift_expression-> additive_expression
relational_expression ->relational_expression GREATER_THAN shift_expression
equality_expression->relational_expression
AND_expression ->equality_expression
exclusive_OR_expression ->AND_expression
inclusive_OR_expression ->exclusive_OR_expression 
logical_AND_expression ->inclusive_OR_expression  
logical_OR_expression->logical_AND_expression 
conditional_expression ->logical_OR_expression 
assignment_expression ->conditional_expression 
expression ->assignment_expression 
k
0xecebb0
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
additive_expression-> multiplicative_expression
shift_expression-> additive_expression
relational_expression-> shift_expression 
equality_expression->relational_expression
AND_expression ->equality_expression
exclusive_OR_expression ->AND_expression
inclusive_OR_expression ->exclusive_OR_expression 
logical_AND_expression ->inclusive_OR_expression  
logical_OR_expression->logical_AND_expression 
conditional_expression ->logical_OR_expression 
assignment_expression ->conditional_expression 
expression ->assignment_expression 
jump_statement ->RETURN_KEYWORD expression SEMICOLON_TERMINATOR 
statement ->jump_statement 
block_item ->statement
block_item_list ->block_item 
compound_statement->LEFT_CURLY_BRACE block_item_list RIGHT_CURLY_BRACE 
statement ->compound_statement
l
0xecec10
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
additive_expression-> multiplicative_expression
shift_expression-> additive_expression
relational_expression-> shift_expression 
equality_expression->relational_expression
AND_expression ->equality_expression
exclusive_OR_expression ->AND_expression
inclusive_OR_expression ->exclusive_OR_expression 
logical_AND_expression ->inclusive_OR_expression  
logical_OR_expression->logical_AND_expression 
conditional_expression ->logical_OR_expression 
assignment_expression ->conditional_expression 
expression ->assignment_expression 
jump_statement ->RETURN_KEYWORD expression SEMICOLON_TERMINATOR 
statement ->jump_statement 
block_item ->statement
block_item_list ->block_item 
compound_statement->LEFT_CURLY_BRACE block_item_list RIGHT_CURLY_BRACE 
statement ->compound_statement
selection_statement ->IF_KEYWORD LEFT_ROUND_BRACE expression N  RIGHT_ROUND_BRACE M  statement N  ELSE_KEYWORD M statement  
statement ->selection_statement 
block_item ->statement
block_item_list ->block_item 
compound_statement->LEFT_CURLY_BRACE block_item_list RIGHT_CURLY_BRACE 
function_definition->declaration_specifiers declarator F compound_statement
external_declaration ->function_definition
translation_unit -> external_declaration
type_specifier ->INT_KEYWORD 
 declaration_specifiers -> type_specifier
direct_declarator ->IDENTIFIER 
direct_declarator -> direct_declarator LEFT_ROUND_BRACE RIGHT_ROUND_BRACE
 declarator -> direct_declarator
type_specifier ->INT_KEYWORD 
 declaration_specifiers -> type_specifier
direct_declarator ->IDENTIFIER 
declarator -> direct_declarator
init_declarator->declarator
init_declarator_list ->init_declarator 
direct_declarator ->IDENTIFIER 
declarator -> direct_declarator
init_declarator->declarator
init_declarator_list->init_declarator_list COMMA init_declarator  
declaration -> declaration_specifiers init_declarator_list SEMICOLON_TERMINATOR
block_item ->declaration
block_item_list ->block_item 
type_specifier ->INT_KEYWORD 
 declaration_specifiers -> type_specifier
direct_declarator ->IDENTIFIER 
declarator -> direct_declarator
init_declarator->declarator
init_declarator_list ->init_declarator 
direct_declarator ->IDENTIFIER 
declarator -> direct_declarator
init_declarator->declarator
init_declarator_list->init_declarator_list COMMA init_declarator  
declaration -> declaration_specifiers init_declarator_list SEMICOLON_TERMINATOR
block_item ->declaration
block_item_list ->block_item_list M block_item  
a
0xecefd0
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
assignment_operator -> EQUAL
constant-> INTEGER_CONSTANT 
primary_expression-> constant 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
additive_expression-> multiplicative_expression
shift_expression-> additive_expression
relational_expression-> shift_expression 
equality_expression->relational_expression
AND_expression ->equality_expression
exclusive_OR_expression ->AND_expression
inclusive_OR_expression ->exclusive_OR_expression 
logical_AND_expression ->inclusive_OR_expression  
logical_OR_expression->logical_AND_expression 
conditional_expression ->logical_OR_expression 
assignment_expression ->conditional_expression 
assignment_expression->unary_expression assignment_operator assignment_expression  
expression ->assignment_expression 
expression_statement -> expression  SEMICOLON_TERMINATOR  
statement ->expression_statement 
block_item ->statement
block_item_list ->block_item_list M block_item  
b
0xecf010
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
assignment_operator -> EQUAL
constant-> INTEGER_CONSTANT 
primary_expression-> constant 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
additive_expression-> multiplicative_expression
shift_expression-> additive_expression
relational_expression-> shift_expression 
equality_expression->relational_expression
AND_expression ->equality_expression
exclusive_OR_expression ->AND_expression
inclusive_OR_expression ->exclusive_OR_expression 
logical_AND_expression ->inclusive_OR_expression  
logical_OR_expression->logical_AND_expression 
conditional_expression ->logical_OR_expression 
assignment_expression ->conditional_expression 
assignment_expression->unary_expression assignment_operator assignment_expression  
expression ->assignment_expression 
expression_statement -> expression  SEMICOLON_TERMINATOR  
statement ->expression_statement 
block_item ->statement
block_item_list ->block_item_list M block_item  
type_specifier ->DOUBLE_KEYWORD 
 declaration_specifiers -> type_specifier
direct_declarator ->IDENTIFIER 
declarator -> direct_declarator
init_declarator->declarator
init_declarator_list ->init_declarator 
declaration -> declaration_specifiers init_declarator_list SEMICOLON_TERMINATOR
block_item ->declaration
block_item_list ->block_item_list M block_item  
i
0xecf070
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
assignment_operator -> EQUAL
constant-> INTEGER_CONSTANT 
primary_expression-> constant 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
additive_expression-> multiplicative_expression
shift_expression-> additive_expression
relational_expression-> shift_expression 
equality_expression->relational_expression
AND_expression ->equality_expression
exclusive_OR_expression ->AND_expression
inclusive_OR_expression ->exclusive_OR_expression 
logical_AND_expression ->inclusive_OR_expression  
logical_OR_expression->logical_AND_expression 
conditional_expression ->logical_OR_expression 
assignment_expression ->conditional_expression 
assignment_expression->unary_expression assignment_operator assignment_expression  
expression ->assignment_expression 
expression_statement -> expression  SEMICOLON_TERMINATOR  
i
0xecf070
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
additive_expression-> multiplicative_expression
shift_expression-> additive_expression
relational_expression-> shift_expression 
a
0xecefd0
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
additive_expression-> multiplicative_expression
shift_expression-> additive_expression
relational_expression -> relational_expression LESS_THAN shift_expression  
equality_expression->relational_expression
AND_expression ->equality_expression
exclusive_OR_expression ->AND_expression
inclusive_OR_expression ->exclusive_OR_expression 
logical_AND_expression ->inclusive_OR_expression  
logical_OR_expression->logical_AND_expression 
conditional_expression ->logical_OR_expression 
assignment_expression ->conditional_expression 
expression ->assignment_expression 
expression_statement -> expression  SEMICOLON_TERMINATOR  
i
0xecf070
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
unary_expression-> PLUS_PLUS unary_expression 
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
additive_expression-> multiplicative_expression
shift_expression-> additive_expression
relational_expression-> shift_expression 
equality_expression->relational_expression
AND_expression ->equality_expression
exclusive_OR_expression ->AND_expression
inclusive_OR_expression ->exclusive_OR_expression 
logical_AND_expression ->inclusive_OR_expression  
logical_OR_expression->logical_AND_expression 
conditional_expression ->logical_OR_expression 
assignment_expression ->conditional_expression 
expression ->assignment_expression 
c
0xecf0b0
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
assignment_operator -> EQUAL
c
0xecf0b0
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
additive_expression-> multiplicative_expression
a
0xecefd0
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
The additive has the name ..c
The additive has the name ..a
additive_expression-> additive_expression PLUS multiplicative_expression 
shift_expression-> additive_expression
relational_expression-> shift_expression 
equality_expression->relational_expression
AND_expression ->equality_expression
exclusive_OR_expression ->AND_expression
inclusive_OR_expression ->exclusive_OR_expression 
logical_AND_expression ->inclusive_OR_expression  
logical_OR_expression->logical_AND_expression 
conditional_expression ->logical_OR_expression 
assignment_expression ->conditional_expression 
assignment_expression->unary_expression assignment_operator assignment_expression  
expression ->assignment_expression 
expression_statement -> expression  SEMICOLON_TERMINATOR  
statement ->expression_statement 
block_item ->statement
block_item_list ->block_item 
a
0xecefd0
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
assignment_operator -> EQUAL
a
0xecefd0
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
additive_expression-> multiplicative_expression
shift_expression-> additive_expression
constant-> INTEGER_CONSTANT 
primary_expression-> constant 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
additive_expression-> multiplicative_expression
shift_expression-> shift_expression LEFT_SHIFT additive_expression  
relational_expression-> shift_expression 
equality_expression->relational_expression
AND_expression ->equality_expression
exclusive_OR_expression ->AND_expression
inclusive_OR_expression ->exclusive_OR_expression 
logical_AND_expression ->inclusive_OR_expression  
logical_OR_expression->logical_AND_expression 
conditional_expression ->logical_OR_expression 
assignment_expression ->conditional_expression 
assignment_expression->unary_expression assignment_operator assignment_expression  
expression ->assignment_expression 
expression_statement -> expression  SEMICOLON_TERMINATOR  
statement ->expression_statement 
block_item ->statement
block_item_list ->block_item_list M block_item  
d
0xecf350
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
assignment_operator -> EQUAL
max
0xecef10
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
c
0xecf0b0
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
additive_expression-> multiplicative_expression
shift_expression-> additive_expression
relational_expression-> shift_expression 
equality_expression->relational_expression
AND_expression ->equality_expression
exclusive_OR_expression ->AND_expression
inclusive_OR_expression ->exclusive_OR_expression 
logical_AND_expression ->inclusive_OR_expression  
logical_OR_expression->logical_AND_expression 
conditional_expression ->logical_OR_expression 
assignment_expression ->conditional_expression 
argument_expression_list-> assignment_expression
a
0xecefd0
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
additive_expression-> multiplicative_expression
shift_expression-> additive_expression
relational_expression-> shift_expression 
equality_expression->relational_expression
AND_expression ->equality_expression
exclusive_OR_expression ->AND_expression
inclusive_OR_expression ->exclusive_OR_expression 
logical_AND_expression ->inclusive_OR_expression  
logical_OR_expression->logical_AND_expression 
conditional_expression ->logical_OR_expression 
assignment_expression ->conditional_expression 
argument_expression_list-> argument_expression_list COMMA assignment_expression
postfix_expression-> postfix_expression LEFT_ROUND_BRACE argument_expression_list RIGHT_ROUND_BRACE
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
additive_expression-> multiplicative_expression
shift_expression-> additive_expression
relational_expression-> shift_expression 
equality_expression->relational_expression
AND_expression ->equality_expression
exclusive_OR_expression ->AND_expression
inclusive_OR_expression ->exclusive_OR_expression 
logical_AND_expression ->inclusive_OR_expression  
logical_OR_expression->logical_AND_expression 
conditional_expression ->logical_OR_expression 
assignment_expression ->conditional_expression 
NAME e1>>>>>>>>>>>>>>>>>>d
NAME e2>>>>>>>>>>>>>>>>>>>>>>>>t007
assignment_expression->unary_expression assignment_operator assignment_expression  
expression ->assignment_expression 
expression_statement -> expression  SEMICOLON_TERMINATOR  
statement ->expression_statement 
block_item ->statement
block_item_list ->block_item_list M block_item  
compound_statement->LEFT_CURLY_BRACE block_item_list RIGHT_CURLY_BRACE 
statement ->compound_statement
iteration_statement->FOR_KEYWORD LEFT_ROUND_BRACE expression_statement M  expression_statement N   M expression N RIGHT_ROUND_BRACE M  statement 
statement ->iteration_statement 
block_item ->statement
block_item_list ->block_item_list M block_item  
i
0xecf070
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
assignment_operator -> EQUAL
constant-> INTEGER_CONSTANT 
primary_expression-> constant 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
additive_expression-> multiplicative_expression
shift_expression-> additive_expression
relational_expression-> shift_expression 
equality_expression->relational_expression
AND_expression ->equality_expression
exclusive_OR_expression ->AND_expression
inclusive_OR_expression ->exclusive_OR_expression 
logical_AND_expression ->inclusive_OR_expression  
logical_OR_expression->logical_AND_expression 
conditional_expression ->logical_OR_expression 
assignment_expression ->conditional_expression 
assignment_expression->unary_expression assignment_operator assignment_expression  
expression ->assignment_expression 
expression_statement -> expression  SEMICOLON_TERMINATOR  
statement ->expression_statement 
block_item ->statement
block_item_list ->block_item_list M block_item  
c
0xecf0b0
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
assignment_operator -> EQUAL
c
0xecf0b0
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
additive_expression-> multiplicative_expression
b
0xecf010
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
additive_expression-> additive_expression MINUS multiplicative_expression 
shift_expression-> additive_expression
relational_expression-> shift_expression 
equality_expression->relational_expression
AND_expression ->equality_expression
exclusive_OR_expression ->AND_expression
inclusive_OR_expression ->exclusive_OR_expression 
logical_AND_expression ->inclusive_OR_expression  
logical_OR_expression->logical_AND_expression 
conditional_expression ->logical_OR_expression 
assignment_expression ->conditional_expression 
assignment_expression->unary_expression assignment_operator assignment_expression  
expression ->assignment_expression 
expression_statement -> expression  SEMICOLON_TERMINATOR  
statement ->expression_statement 
block_item ->statement
block_item_list ->block_item 
c
0xecf0b0
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
assignment_operator -> EQUAL
c
0xecf0b0
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
b
0xecf010
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> multiplicative_expression MULTIPLICATION cast_expression
additive_expression-> multiplicative_expression
shift_expression-> additive_expression
relational_expression-> shift_expression 
equality_expression->relational_expression
AND_expression ->equality_expression
exclusive_OR_expression ->AND_expression
inclusive_OR_expression ->exclusive_OR_expression 
logical_AND_expression ->inclusive_OR_expression  
logical_OR_expression->logical_AND_expression 
conditional_expression ->logical_OR_expression 
assignment_expression ->conditional_expression 
assignment_expression->unary_expression assignment_operator assignment_expression  
expression ->assignment_expression 
expression_statement -> expression  SEMICOLON_TERMINATOR  
statement ->expression_statement 
block_item ->statement
block_item_list ->block_item_list M block_item  
compound_statement->LEFT_CURLY_BRACE block_item_list RIGHT_CURLY_BRACE 
statement ->compound_statement
i
0xecf070
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
additive_expression-> multiplicative_expression
shift_expression-> additive_expression
relational_expression-> shift_expression 
constant-> INTEGER_CONSTANT 
primary_expression-> constant 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
additive_expression-> multiplicative_expression
shift_expression-> additive_expression
relational_expression -> relational_expression LESS_THAN shift_expression  
equality_expression->relational_expression
AND_expression ->equality_expression
exclusive_OR_expression ->AND_expression
inclusive_OR_expression ->exclusive_OR_expression 
logical_AND_expression ->inclusive_OR_expression  
logical_OR_expression->logical_AND_expression 
conditional_expression ->logical_OR_expression 
assignment_expression ->conditional_expression 
expression ->assignment_expression 
iteration_statement ->DO_KEYWORD M statement M WHILE_KEYWORD LEFT_ROUND_BRACE expression N RIGHT_ROUND_BRACE SEMICOLON_TERMINATOR
statement ->iteration_statement 
block_item ->statement
block_item_list ->block_item_list M block_item  
constant-> INTEGER_CONSTANT 
primary_expression-> constant 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
additive_expression-> multiplicative_expression
shift_expression-> additive_expression
relational_expression-> shift_expression 
equality_expression->relational_expression
AND_expression ->equality_expression
exclusive_OR_expression ->AND_expression
inclusive_OR_expression ->exclusive_OR_expression 
logical_AND_expression ->inclusive_OR_expression  
logical_OR_expression->logical_AND_expression 
conditional_expression ->logical_OR_expression 
assignment_expression ->conditional_expression 
expression ->assignment_expression 
d
0xecf350
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
postfix_expression-> postfix_expression PLUS_PLUS 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
additive_expression-> multiplicative_expression
shift_expression-> additive_expression
relational_expression-> shift_expression 
equality_expression->relational_expression
AND_expression ->equality_expression
exclusive_OR_expression ->AND_expression
inclusive_OR_expression ->exclusive_OR_expression 
logical_AND_expression ->inclusive_OR_expression  
logical_OR_expression->logical_AND_expression 
conditional_expression ->logical_OR_expression 
assignment_expression ->conditional_expression 
expression ->assignment_expression 
expression_statement -> expression  SEMICOLON_TERMINATOR  
statement ->expression_statement 
block_item ->statement
block_item_list ->block_item 
d
0xecf350
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
additive_expression-> multiplicative_expression
shift_expression-> additive_expression
relational_expression-> shift_expression 
constant-> INTEGER_CONSTANT 
primary_expression-> constant 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
additive_expression-> multiplicative_expression
shift_expression-> additive_expression
relational_expression -> relational_expression LESS_THAN shift_expression  
equality_expression->relational_expression
AND_expression ->equality_expression
exclusive_OR_expression ->AND_expression
inclusive_OR_expression ->exclusive_OR_expression 
logical_AND_expression ->inclusive_OR_expression  
logical_OR_expression->logical_AND_expression 
conditional_expression ->logical_OR_expression 
assignment_expression ->conditional_expression 
expression ->assignment_expression 
d
0xecf350
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
assignment_operator -> EQUAL
d
0xecf350
primary_expression-> IDENTIFIER 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
additive_expression-> multiplicative_expression
constant->FLOATING_CONSTANT 
primary_expression-> constant 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
The additive has the name ..d
The additive has the name ..t016
additive_expression-> additive_expression PLUS multiplicative_expression 
shift_expression-> additive_expression
relational_expression-> shift_expression 
equality_expression->relational_expression
AND_expression ->equality_expression
exclusive_OR_expression ->AND_expression
inclusive_OR_expression ->exclusive_OR_expression 
logical_AND_expression ->inclusive_OR_expression  
logical_OR_expression->logical_AND_expression 
conditional_expression ->logical_OR_expression 
assignment_expression ->conditional_expression 
assignment_expression->unary_expression assignment_operator assignment_expression  
expression ->assignment_expression 
expression_statement -> expression  SEMICOLON_TERMINATOR  
statement ->expression_statement 
block_item ->statement
block_item_list ->block_item 
compound_statement->LEFT_CURLY_BRACE block_item_list RIGHT_CURLY_BRACE 
statement ->compound_statement
iteration_statement ->WHILE_KEYWORD M LEFT_ROUND_BRACE expression N  RIGHT_ROUND_BRACE M  statement  
statement ->iteration_statement 
block_item ->statement
block_item_list ->block_item_list M block_item  
compound_statement->LEFT_CURLY_BRACE block_item_list RIGHT_CURLY_BRACE 
statement ->compound_statement
iteration_statement ->WHILE_KEYWORD M LEFT_ROUND_BRACE expression N  RIGHT_ROUND_BRACE M  statement  
statement ->iteration_statement 
block_item ->statement
block_item_list ->block_item_list M block_item  
constant-> INTEGER_CONSTANT 
primary_expression-> constant 
postfix_expression-> primary_expression 
unary_expression-> postfix_expression
cast_expression-> unary_expression
multiplicative_expression-> cast_expression
additive_expression-> multiplicative_expression
shift_expression-> additive_expression
relational_expression-> shift_expression 
equality_expression->relational_expression
AND_expression ->equality_expression
exclusive_OR_expression ->AND_expression
inclusive_OR_expression ->exclusive_OR_expression 
logical_AND_expression ->inclusive_OR_expression  
logical_OR_expression->logical_AND_expression 
conditional_expression ->logical_OR_expression 
assignment_expression ->conditional_expression 
expression ->assignment_expression 
jump_statement ->RETURN_KEYWORD expression SEMICOLON_TERMINATOR 
statement ->jump_statement 
block_item ->statement
block_item_list ->block_item_list M block_item  
compound_statement->LEFT_CURLY_BRACE block_item_list RIGHT_CURLY_BRACE 
function_definition->declaration_specifiers declarator F compound_statement
external_declaration ->function_definition
translation_unit -> translation_unit external_declaration
THIS IS THE END OF PARSING
********************************************************************************************************************
********************************************************************************************************************

SYMBOL TABLES ARE AS FOLLOWS:
GLOBAL SYMBOL TABLE : 
----------------------
|      NAME|      TYPE|      SIZE|    OFFSET|     VALUE|NESTED TABLE
|      ----|      ----|      ----|    ------|  --------|------------
|       max| function |         0|         0|       nil|max SYMBOL TABLE

|      main| function |         0|         0|       nil|main SYMBOL TABLE

max SYMBOL TABLE :  
---------------------
|      NAME|      TYPE|      SIZE|    OFFSET|     VALUE|NESTED TABLE
|      ----|      ----|      ----|    ------|  --------|------------
|         k|      int |         4|         0|       nil|       nil

|         l|      int |         4|         4|       nil|       nil

|    RETURN|      int |         4|         8|       nil|       nil

main SYMBOL TABLE :  
---------------------
|      NAME|      TYPE|      SIZE|    OFFSET|     VALUE|NESTED TABLE
|      ----|      ----|      ----|    ------|  --------|------------
|         a|      int |         4|         0|       nil|       nil

|         b|      int |         4|         4|       nil|       nil

|         i|      int |         4|         8|       nil|       nil

|         c|      int |         4|        12|       nil|       nil

|      t000|      int |         4|        16|       nil|       nil

|      t001|      int |         4|        20|       nil|       nil

|         d|   double |         8|        24|       nil|       nil

|      t002|      int |         4|        32|       nil|       nil

|      t003|      int |         4|        36|       nil|       nil

|      t004|      int |         4|        40|       nil|       nil

|      t005|      int |         4|        44|       nil|       nil

|      t006|      int |         4|        48|       nil|       nil

|      t007|      int |         4|        52|       nil|       nil

|      t008|      int |         4|        56|       nil|       nil

|      t009|      int |         4|        60|       nil|       nil

|      t010|      int |         4|        64|       nil|       nil

|      t011|      int |         4|        68|       nil|       nil

|      t012|      int |         4|        72|       nil|       nil

|      t013|      int |         4|        76|       nil|       nil

|      t014|   double |         8|        80|       nil|       nil

|      t015|      int |         4|        88|       nil|       nil

|      t016|   double |         8|        92|       nil|       nil

|      t017|   double |         8|       100|       nil|       nil

|      t018|      int |         4|       108|       nil|       nil

|    RETURN|      int |         4|       112|       nil|       nil


################################################################################################
THREE ADDRESS CODE :
------------------------------------------------------------------------------------------------------------------
*************************************
0 -> max  - FUNCTION 
*************************************
1 -> if k > l goto 4
2 -> goto 6
3 -> goto 7
4 -> return k
5 -> goto ....
6 -> return l
*************************************
7 -> main  - FUNCTION 
*************************************
8 -> t000 = 10
9 -> a = t000
10 -> t001 = 0
11 -> b = t001
12 -> t002 = 0
13 -> i = t002
14 -> if i < a goto 20
15 -> goto 31
16 -> goto 31
17 -> i = i + 1
18 -> t003 = i
19 -> goto 14
20 -> t004 = c + a
21 -> c = t004
22 -> t005 = 1
23 -> t006 = a << t005
24 -> a = t006
25 -> param c
26 -> param a
27 -> t007 = call max, 2
28 -> t008 = double_to_integer(d)
29 -> d = t008
30 -> goto 17
31 -> t009 = 0
32 -> i = t009
33 -> t010 = c - b
34 -> c = t010
35 -> t011 = c * b
36 -> c = t011
37 -> t012 = 10
38 -> if i < t012 goto 33
39 -> goto 41
40 -> goto 41
41 -> t013 = 1
42 -> goto 54
43 -> t014 = d
44 -> d = d + 1
45 -> t015 = 10
46 -> if d < t015 goto 49
47 -> goto 41
48 -> goto 53
49 -> t016 = 1.230000
50 -> t017 = d + t016
51 -> d = t017
52 -> goto 45
53 -> goto 41
54 -> if t013 == 0 goto 43
55 -> goto 56
56 -> t018 = 0
57 -> return t018
